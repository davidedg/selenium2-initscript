#!/bin/bash
### BEGIN INIT INFO
# Provides:          selenium-hub
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts or stops Selenium 2 Hub Server.
# Description:       Starts or stops Selenium 2 Hub Server.
### END INIT INFO

# clean environment
unset TMPDIR
PATH=/bin:/usr/bin:/sbin:/usr/sbin

NAME=selenium-hub
DESC="Selenium Hub Server"
SCRIPTNAME=/etc/init.d/$NAME
PIDFILE=/var/run/$NAME/$NAME.pid
PIDDIR=`dirname $PIDFILE`


# load environments
if [ -r /etc/default/locale ]; then
  . /etc/default/locale
  export LANG LANGUAGE
elif [ -r /etc/environment ]; then
  . /etc/environment
  export LANG LANGUAGE
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

SELENIUM_JAR=/usr/share/selenium/selenium-server-standalone.jar

# get defaults
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

SU=/bin/su
DAEMON=/usr/bin/daemon
DAEMON_ARGS="--name=$NAME --inherit --stdout=$SELENIUM_HUB_LOG --output=$SELENIUM_HUB_LOG --pidfile=$PIDFILE"
SELENIUM_HUB_ARGS="-jar ${SELENIUM_JAR} -role hub -hubConfig ${SELENIUM_HUB_CONFIG} $SELENIUM_HUB_EXTRA_ARGS"



# Must run as root (for ulimit and chown)
if [ `id -u` -ne 0 ]; then
	echo "FATAL: init script must be run as root"
	exit 1
fi

# Prepare PID DIR: this will be needed for every action
mkdir -p $PIDDIR > /dev/null 2>&1 || true
chown $SELENIUM_HUB_USER $PIDDIR > /dev/null 2>&1 || true

if [ ! -x $SU ]; then
	echo "FATAL: cannot find 'su' binary"
	exit 1
fi

if [ ! -x $DAEMON ]; then
	echo "FATAL: cannot find 'daemon' binary"
	exit 1
fi

if [ ! -x $JAVA ]; then
	echo "FATAL: cannot find 'java' binary"
	exit 1
fi





check_tcp_port() {
	local port=$1
	local bound=`lsof -bniTCP:$port|wc -l`
	if [ $bound -ne 0 ]; then
		return 1
	else
		return 0
	fi
}


do_start()
{
	if [ ! -r $SELENIUM_HUB_CONFIG ]; then
		echo ""
		log_failure_msg "ERROR: cannot read $SELENIUM_HUB_CONFIG"
		exit 1
	fi

	# wait for port binding to settle
	sleep 5


	# Unfortunately, Selenium keeps running on java BindException
	SELENIUM_HUB_PORT=`grep '"port": ' $SELENIUM_HUB_CONFIG|sed -e 's/[ |,]//g'|cut -d: -f2`
	check_tcp_port $SELENIUM_HUB_PORT
	if [ $? -ne 0 ]; then
		echo ""
		log_failure_msg "ERROR: port $SELENIUM_HUB_PORT already in use."
		exit 1
	fi

	if [ -n "$MAXOPENFILES" ]; then
		[ "$VERBOSE" != no ] && echo Setting up max open files limit to $MAXOPENFILES
		ulimit -n $MAXOPENFILES
	fi


	$SU -l $SELENIUM_HUB_USER --shell=/bin/bash -c "$DAEMON $DAEMON_ARGS -- $JAVA $JAVA_ARGS $SELENIUM_HUB_ARGS" || return 2
}


get_running() 
{
	local instances=`ps -U $SELENIUM_HUB_USER --no-headers -f | wc -l`
	return $instances
}

force_stop() 
{
	get_running
	if [ $? -ne 0 ]; then 
		killall -u $SELENIUM_HUB_USER java daemon || return 3
	fi
}

# Get the status of the daemon process
get_daemon_status()
{
	$DAEMON $DAEMON_ARGS --running || return 1
}


do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	get_daemon_status 
	case "$?" in
	0) 
		$DAEMON $DAEMON_ARGS --stop || return 2
		# wait for the process to really terminate
		for n in 1 2 3 4 5 6 7 8 9 10; do
			sleep 1
			$DAEMON $DAEMON_ARGS --running || break
		done
		if get_daemon_status; then
			force_stop || return 3
		fi
		;;
	*)
		force_stop || return 3
		;;
	esac

	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return 0
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
	get_daemon_status
	if [ $? -eq 0 ]; then
		log_progress_msg "already running"
		log_end_msg 0
	else
		do_start
		case "$?" in
			0|1) log_end_msg 0 ;;
			2) log_end_msg 1 ;;
		esac
	fi
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
		  0) log_end_msg 0 ;;
		  1) log_end_msg 1 ;; # Old process is still running
		  *) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
  	# Failed to stop
	log_end_msg 1
	;;
	esac
	;;
  status)
	  get_daemon_status
	  case "$?" in 
	 0) echo "$DESC is running with the pid `cat $PIDFILE`";;
		 *) 
		  get_running
		  procs=$?
		  if [ $procs -eq 0 ]; then 
		  echo -n "$DESC is not running"
		  if [ -f $PIDFILE ]; then 
			  echo ", but the pidfile ($PIDFILE) still exists"
		  else 
			  echo
		  fi

		  else 
		  echo "$procs instances of selenium hub are running at the moment"
		  echo "but the pidfile $PIDFILE is missing"
		  fi
		  ;;
	  esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

exit 0
